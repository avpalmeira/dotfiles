#!/usr/bin/env bash

# ~/.macos — https://mths.be/macos
# Modified by Antonio Palmeira
# Run without downloading:
# curl https://raw.githubusercontent.com/avpalmeira/dotfiles/master/mac_setup | bash

# Close any open System Preferences panes, to prevent them from overriding
# settings we’re about to change
osascript -e 'tell application "System Preferences" to quit'

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until `mac_setup` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &


###############################################################################
# My Customizations.                                                          #
###############################################################################

echo "Hello $(whoami)! Let's get you set up."

echo "Creating dev workspace folder"
mkdir -p "${HOME}/source"

echo "Installing homebrew..."
# install homebrew https://brew.sh
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

echo "brew installing stuff..."
brew install \
    git \  # the default VCS of the world
    gh \  # github in the terminal
    tldr \  # simplified and community-driven man pages
    tree  # really handy for listing out directories in text

echo "Installing node (via nvm)..."
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
nvm install stable

echo "node --version: $(node --version)"
echo "npm --version: $(npm --version)"

echo "Installing apps with brew --cask"
brew install --cask \
    visual-studio-code \
    arc \
    warp \
    notion \
    obsidian \
    keepassxc \
    figma \
    onedrive \
    tradingview \
    tableplus \
    whatsapp \
    karabiner-elements \
    kit \
    maccy \
    loop \
    discord \
    zoom \
    spotify \
    slack

echo "Installing docker..."
softwareupdate --install-rosetta
curl --remote-name https://desktop.docker.com/mac/main/arm64/160616/Docker.dmg
hdiutil attach Docker.dmg
/Volumes/Docker/Docker.app/Contents/MacOS/install
hdiutil detach /Volumes/Docker
rm Docker.dmg

echo "Installing oh-my-zsh..."
REPO=avpalmeira/oh-my-zsh sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

echo "Generating an RSA token for GitHub"
mkdir -p ~/.ssh
touch ~/.ssh/config
ssh-keygen -t ed25519 -C "antonio@palmeira.tech"
echo "Host *\n AddKeysToAgent yes\n UseKeychain yes\n IdentityFile ~/.ssh/id_ed25519" | tee ~/.ssh/config
eval "$(ssh-agent -s)"
echo "run 'pbcopy < ~/.ssh/id_rsa.pub' and paste that into GitHub"

echo "Cloning and setting up dotfiles"
git clone git@github.com:avpalmeira/dotfiles.git "${HOME}/dotfiles"
ln -s "${HOME}/dotfiles/shell/zsh/zshrc" "${HOME}/.zshrc"
mkdir -p ~/.shell
ln -s "${HOME}/dotfiles/shell/zsh/zsh-pre-tools.sh" "${HOME}/.shell/zsh-pre-tools.sh"
ln -s "${HOME}/dotfiles/shell/aliases.sh" "${HOME}/.shell/aliases.sh"
ln -s "${HOME}/dotfiles/shell/tools.sh" "${HOME}/.shell/tools.sh"
ln -s "${HOME}/dotfiles/gitconfig" "${HOME}/.gitconfig"
ln -s "${HOME}/dotfiles/vim/plugins.install.vim" "${HOME}/.vim/plugins.install"
ln -s "${HOME}/dotfiles/vim/plugins.config.vim" "${HOME}/.vim/plugins.config"
ln -s "${HOME}/dotfiles/vim/vimrc.vim" "${HOME}/.vimrc"

echo "Cloning and setting up local dotfiles"
mkdir -p ~/.local/bin
git clone git@github.com:avpalmeira/dotfiles-local.git "${HOME}/.local/dotfiles"
if [ -d ~/.local/dotfiles ]
then
    ln -s "${HOME}/.local/dotfiles/aliases.mac.sh" "${HOME}/.local/aliases.local.sh"
    ln -s "${HOME}/.local/dotfiles/tools.mac.sh" "${HOME}/.local/tools.local.sh"
    ln -s "${HOME}/.local/dotfiles/functions.sh" "${HOME}/.local/functions.local.sh"
    ln -s "${HOME}/.local/dotfiles/zshrc.local" "${HOME}/.local/zshrc.local"
    ln -s "${HOME}/.local/dotfiles/vimrc.local" "${HOME}/.local/vimrc.local"
    ln -s "${HOME}/.local/dotfiles/gitconfig.local" "${HOME}/.local/gitconfig.local"
    ln -s "${HOME}/.local/dotfiles/bin/prune.sh" "${HOME}/.local/bin/prune.sh"
else
    echo "Local dotfiles were not cloned"
fi

###############################################################################
# General UI/UX                                                               #
###############################################################################

# Disable the “Are you sure you want to open this application?” dialog
defaults write com.apple.LaunchServices LSQuarantine -bool false

# Disable the crash reporter
defaults write com.apple.CrashReporter DialogType -string "none"

# Never go into computer sleep mode
sudo systemsetup -setcomputersleep Off > /dev/null

# Disable automatic capitalization as it’s annoying when typing code
defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false

# Disable smart dashes as they’re annoying when typing code
defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

# Disable automatic period substitution as it’s annoying when typing code
defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false

# Disable smart quotes as they’re annoying when typing code
defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

# Disable auto-correct
defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

# Show language menu in the top right corner of the boot screen
defaults write /Library/Preferences/com.apple.loginwindow showInputMenu -bool true

# Set the timezone; see `sudo systemsetup -listtimezones` for other values
sudo systemsetup -settimezone "America/Recife" > /dev/null


###############################################################################
# Finder                                                                      #
###############################################################################

# Disable disk image verification
defaults write com.apple.frameworks.diskimages skip-verify -bool true
defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true
defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true

# Automatically open a new Finder window when a volume is mounted
defaults write com.apple.frameworks.diskimages auto-open-ro-root -bool true
defaults write com.apple.frameworks.diskimages auto-open-rw-root -bool true
defaults write com.apple.finder OpenWindowForNewRemovableDisk -bool true

# Use column view in all Finder windows by default
# Four-letter codes for the other view modes: `icnv`, `clmv`, `Flwv`, `Nlsv`
#defaults write com.apple.finder FXPreferredViewStyle -string "clmv"


###############################################################################
# Dock and hot corners                                                        #
###############################################################################

# Automatically hide and show the Dock
defaults write com.apple.dock autohide -bool true

# Hot corners
# Possible values:
#  0: no-op
#  2: Mission Control
#  3: Show application windows
#  4: Desktop
#  5: Start screen saver
#  6: Disable screen saver
#  7: Dashboard
# 10: Put display to sleep
# 11: Launchpad
# 12: Notification Center
# Top left screen corner → No-op
defaults write com.apple.dock wvous-tl-corner -int 0
# Top right screen corner → Mission Control
defaults write com.apple.dock wvous-tr-corner -int 2
# Bottom left screen corner → Desktop
defaults write com.apple.dock wvous-bl-corner -int 4
# Bottom right screen corner → Quick note (default)

###############################################################################
# Mac App Store                                                               #
###############################################################################

# Enable the automatic update check
defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true

# Check for software updates daily, not just once per week
defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1

# Download newly available updates in background
defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1

# Install System data files & security updates
defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1

# Automatically download apps purchased on other Macs
#defaults write com.apple.SoftwareUpdate ConfigDataInstall -int 1

# Turn on app auto-update
defaults write com.apple.commerce AutoUpdate -bool true

# Disallow the App Store to reboot machine on macOS updates
defaults write com.apple.commerce AutoUpdateRestartRequired -bool false

###############################################################################
# App Configs                                                                 #
###############################################################################

# Prevent Photos from opening automatically when devices are plugged in
defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool true

# Prevent Time Machine from prompting to use new hard drives as backup volume
defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true

# Use plain text mode for new TextEdit documents
defaults write com.apple.TextEdit RichText -int 0
# Open and save files as UTF-8 in TextEdit
defaults write com.apple.TextEdit PlainTextEncoding -int 4
defaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4

###############################################################################
# Wrapping up                                                                 #
###############################################################################

echo "Done. Note that some of these changes require a logout/restart to take effect."


printf "Remember to:\n\
1. Close affected applications\n\
2. Setup Time Machine back up volume\n\
3. Restart Terminal.app\n\
4. Login to literally everything\n\
"
